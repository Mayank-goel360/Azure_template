contexts:
  - name: Body
    when: "True"
    require:
      - type
      - kind
      - name
      - apiVersion
      - location
      - properties.connectorUiConfig

  - name: type
    when : "exists('type')"
    equals:
      type: "Microsoft.SecurityInsights/dataConnectorDefinitions"

  - name: connectorUiConfig
    when: "exists('properties.connectorUiConfig')"
    require:
      - properties.connectorUiConfig.title 
      - properties.connectorUiConfig.publisher 
      - properties.connectorUiConfig.descriptionMarkdown 
      - properties.connectorUiConfig.sampleQueries
      - properties.connectorUiConfig.graphQueries 
      - properties.connectorUiConfig.dataTypes 
      - properties.connectorUiConfig.connectivityCriteria
      - properties.connectorUiConfig.permissions 
      - properties.connectorUiConfig.instructionSteps

    subcontexts:

      - name: sampleQueries
        when: "exists('properties.connectorUiConfig.sampleQueries')"
        array:
          path: "properties.connectorUiConfig.sampleQueries"
          require:
            - description
            - query

      - name: graphQueries
        when: "exists('properties.connectorUiConfig.graphQueries')"
        array:
          path: "properties.connectorUiConfig.graphQueries"
          require:
          - metricName 
          - legend
          - baseQuery       

      - name: permissions
        when : "exists('properties.connectorUiConfig.permissions.resourceProvider')"
        array:
          path: "properties.connectorUiConfig.permissions.resourceProvider"
          require:
              - provider
              - providerDisplayName 
              - permissionsDisplayText
              - requiredPermissions 
              - scope

      - name: dataTypes
        when: "exists('properties.connectorUiConfig.dataTypes')"
        array:
          path: "properties.connectorUiConfig.dataTypes"
          require:
            - name
            - lastDataReceivedQuery            

      - name : connectivityCriteria
        when: "exists('properties.connectorUiConfig.connectivityCriteria')"
        array:
          path: "properties.connectorUiConfig.connectivityCriteria"

      - name: instructionSteps
        array:
          path: "properties.connectorUiConfig.instructionSteps"
          require:
            - instructions

          subarray:
            path: "instructions" ######################### leads form the relative path given in array
            require:
              - type

            subcontexts:

              - name: OAuthForm Instruction
                when: "get('type') == 'OAuthForm'"
                require:
                  - parameters.disconnectButtonLabel
                  - parameters.connectButtonLabel 
                  - parameters.clientSecretLabel 
                  - parameters.clientIdLabel

              - name: ConnectionToggleButton Instruction
                when: "get('type') == 'ConnectionToggleButton'"
                require:
                  - parameters.connectLabel 
                  - parameters.name 

              - name: CopyableLabel Instruction
                when: "get('type') == 'CopyableLabel'"
                require:
                  - parameters.value
                  - parameters.label

              - name: Textbox Instruction
                when: "get('type') == 'Textbox'"
                require:
                  - parameters.label 
                  - parameters.placeholder 
                  - parameters.name

          











# The rules.yml file defines validation rules for your JSON files. It tells your validator.py script:

# When a rule should apply (when: clause)
# What keys must be present (require: list)
# What values must match exactly (equals: dictionary)
# How to validate arrays of objects (array: and subarray: blocks)
# Each rule is called a context, and contexts can be nested to validate substructures.


#can have two require blocks can have two equal blocks also

# Use exists('path') and get('path') in when: to control when a rule applies.
# Use require: to enforce presence of keys.
# Use equals: to enforce exact values.
# Use array: and subarray: to validate lists of objects.
# Nest subcontexts: to validate deeper structures.


# subarray.path: This is the path to the nested array inside each item of the top-level array. Here:
