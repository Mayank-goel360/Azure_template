name: Validation check for CCP data connectors

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  send-json-files:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed JSON files and contents to send to API endpoint
        id: prepare_json_files
        run: |
          echo "Collecting changed JSON files..."

          BASE="origin/${{ github.event.pull_request.base.ref }}"
          HEAD="${{ github.event.pull_request.head.sha }}"

          mapfile -t files < <(git diff --name-only "$BASE" "$HEAD" | grep '\.json$')

          json_array="["
          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              if jq -e . "$file" > /dev/null 2>&1; then
                content=$(jq -c . < "$file")
                json_array+="{\"filename\": \"${file}\", \"content\": $content},"
              else
                echo "❌ Invalid JSON structure in file: $file"
                exit 1
              fi
            fi
          done

          json_array="${json_array%,}]"
          echo "$json_array" > files_payload.json
      
          echo "JSON_PAYLOAD_PATH=files_payload.json" >> $GITHUB_ENV
          
      - name: Debug subscription ID
        run: echo "Subscription ID is ${{ secrets.AZURE_SUBSCRIPTION_ID }}  and check is ${{secrets.SEC}}"
        


      - name: Azure Login using Federated Identity
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: IDENTITY

      - name: Send JSON files to API and check response
        env:
          API_URL: https://valid1-e2akhdekg6a7a2ch.canadacentral-01.azurewebsites.net/
        run: |
          echo "Sending JSON payload to API"

          response=$(curl -s -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            --data-binary "@$JSON_PAYLOAD_PATH")

          status=$(jq -r '.status' <<< "$response")
          message=$(jq -r '.message' <<< "$response")

          if [ "$status" != "passed" ]; then
            echo "❌ Test Fail : $message"
            exit 1
          fi

          echo "✅ $message"
