name: 🔐 OIDC-Protected JSON Validation via Azure

on:
  pull_request:
    types: [opened, synchronize]

permissions:  # ✅ Required to get OIDC token
  id-token: write
  contents: read

jobs:
  validate-json-and-auth:
    runs-on: ubuntu-latest

    env:
      API_URL: https://sentintel-content-dev-fue4ashcg9fnfge9.canadacentral-01.azurewebsites.net/  # 🔁 Replace with actual endpoint
      CLIENT_ID: "da7fd62a-590e-4e7a-8525-55ea01ffb1ac"  # App Registration Client ID

    steps:
      - name: 🔄 Checkout PR Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📁 Collect Changed JSON Files
        id: prepare_json_files
        run: |
          echo "🔍 Finding changed JSON files..."

          BASE="origin/${{ github.event.pull_request.base.ref }}"
          HEAD="${{ github.event.pull_request.head.sha }}"

          echo "Base ref: $BASE"
          echo "Head SHA: $HEAD"

          mapfile -t files < <(git diff --name-only "$BASE" "$HEAD" | grep '\.json$')

          echo "🧾 Found ${#files[@]} JSON files changed."

          json_array="["
          for file in "${files[@]}"; do
            echo "📄 Checking $file"
            if [ -f "$file" ]; then
              if jq -e . "$file" > /dev/null 2>&1; then
                content=$(jq -c . < "$file")
                json_array+="{\"filename\": \"${file}\", \"content\": $content},"
              else
                echo "❌ Invalid JSON: $file"
                exit 1
              fi
            fi
          done

          json_array="${json_array%,}]"
          echo "$json_array" > files_payload.json
          echo "✅ Payload prepared: files_payload.json"

          echo "JSON_PAYLOAD_PATH=files_payload.json" >> $GITHUB_ENV

      - name: 🔐 Request OIDC token from GitHub
        id: fetch_token
        run: |
          echo "🌐 Requesting OIDC token..."
          raw=$(curl -s \
            -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=api://${CLIENT_ID}")
          echo "🔁 Raw token response JSON: $raw"
          token=$(echo "$raw" | jq -r '.value')
          echo "✔️ Token length: ${#token}"
          echo "TOKEN=$token" >> $GITHUB_ENV

          
      - name: 🧪 Debug OIDC Token (first 50 chars)
        run: |
          echo "🔑 Partial token: ${{ steps.oidc.outputs.token }}" | cut -c1-50

      - name: 🚀 Send Payload to Protected API
        run: |
          echo "📤 Sending POST to $API_URL"
          response=$(curl -s -w "\n%{http_code}" -X POST "$API_URL" \
            -H "Authorization: Bearer ${{ steps.oidc.outputs.token }}" \
            -H "Content-Type: application/json" \
            --data-binary "@$JSON_PAYLOAD_PATH")

          body=$(echo "$response" | head -n -1)
          status_code=$(echo "$response" | tail -n1)

          echo "🌐 Status code: $status_code"
          echo "🌐 Body: $body"

          result_status=$(jq -r '.status' <<< "$body")
          result_message=$(jq -r '.message' <<< "$body")

          if [ "$status_code" -ne 200 ] || [ "$result_status" != "passed" ]; then
            echo "❌ Validation failed: $result_message"
            exit 1
          fi

          echo "✅ Validation passed: $result_message"
