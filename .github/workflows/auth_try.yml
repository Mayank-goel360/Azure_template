# name: Validation auth

# permissions:
#   id-token: write
#   contents: read


# on:
#   pull_request:
#     types: [opened, synchronize]

# jobs:
#   send-json-files:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout PR code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Get changed JSON files and contents to send to API endpoint
#         id: prepare_json_files
#         run: |
#           echo "Collecting changed JSON files..."

#           BASE="origin/${{ github.event.pull_request.base.ref }}"
#           HEAD="${{ github.event.pull_request.head.sha }}"

#           mapfile -t files < <(git diff --name-only "$BASE" "$HEAD" | grep '\.json$')

#           json_array="["
#           for file in "${files[@]}"; do
#             if [ -f "$file" ]; then
#               if jq -e . "$file" > /dev/null 2>&1; then
#                 content=$(jq -c . < "$file")
#                 json_array+="{\"filename\": \"${file}\", \"content\": $content},"
#               else
#                 echo "‚ùå Invalid JSON structure in file: $file"
#                 exit 1
#               fi
#             fi
#           done

#           json_array="${json_array%,}]"

#           echo "$json_array" > files_payload.json
#           echo "JSON_PAYLOAD_PATH=files_payload.json" >> $GITHUB_ENV

#       - name: Authenticate to Azure with OIDC
#         uses: azure/login@v1
#         with:
#           client-id: "da7fd62a-590e-4e7a-8525-55ea01ffb1ac"
#           tenant-id: "72f988bf-86f1-41af-91ab-2d7cd011db47"
#           subscription-id: "4383ac89-7cd1-48c1-8061-b0b3c5ccfd97"
#           auth-type: IDENTITY
#           enable-AzPSSession: false

#       - name: Get access token for App Service
#         id: get-token
#         run: |
#           ACCESS_TOKEN=$(az account get-access-token \
#             --resource api://${{ secrets.AZURE_CLIENT_ID }} \
#             --query accessToken -o tsv)
#           echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

#       - name: Send JSON files to API and check response
#         env:
#           API_URL: https://sentintel-content-dev-fue4ashcg9fnfge9.canadacentral-01.azurewebsites.net/
#           ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
#         run: |
#           echo "Sending JSON payload to API"

#           response=$(curl -s -X POST "$API_URL" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer $ACCESS_TOKEN" \
#             --data-binary "@$JSON_PAYLOAD_PATH")

#           status=$(jq -r '.status' <<< "$response")
#           message=$(jq -r '.message' <<< "$response")

#           if [ "$status" != "passed" ]; then
#             echo "‚ùå Test Fail : $message"
#             exit 1
#           fi

#           echo "‚úÖ $message"

name: Validation check for CCP data connectors

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  send-json-files:
    runs-on: ubuntu-latest

    permissions:
      id-token: write     # üîê Needed to request OIDC token
      contents: read      # üìÅ Needed to fetch files from repo

    env:
      API_URL:  https://sentintel-content-dev-fue4ashcg9fnfge9.canadacentral-01.azurewebsites.net/ # üîÅ Replace with actual endpoint
      CLIENT_ID: "da7fd62a-590e-4e7a-8525-55ea01ffb1ac" # App Registration's client ID

    steps:
      - name: üîÑ Checkout PR Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üìÅ Get Changed JSON Files
        id: prepare_json_files
        run: |
          echo "üîç Finding changed JSON files..."

          BASE="origin/${{ github.event.pull_request.base.ref }}"
          HEAD="${{ github.event.pull_request.head.sha }}"

          echo "Base ref: $BASE"
          echo "Head ref: $HEAD"

          mapfile -t files < <(git diff --name-only "$BASE" "$HEAD" | grep '\.json$')

          echo "üîç Found ${#files[@]} JSON files changed."

          json_array="["
          for file in "${files[@]}"; do
            echo "üìÑ Processing file: $file"
            if [ -f "$file" ]; then
              if jq -e . "$file" > /dev/null 2>&1; then
                content=$(jq -c . < "$file")
                json_array+="{\"filename\": \"${file}\", \"content\": $content},"
              else
                echo "‚ùå Invalid JSON in file: $file"
                exit 1
              fi
            fi
          done

          json_array="${json_array%,}]"
          echo "$json_array" > files_payload.json

          echo "‚úÖ JSON payload file created at: files_payload.json"
          echo "JSON_PAYLOAD_PATH=files_payload.json" >> $GITHUB_ENV

      - name: üîê Request OIDC Token from GitHub
        id: oidc
        uses: actions/github-script@v6
        with:
          script: |
            console.log("üåê Getting OIDC token with audience: api://" + process.env.CLIENT_ID);
            const idToken = await core.getIDToken("api://" + process.env.CLIENT_ID);
            core.setOutput("token", idToken);
            console.log("‚úÖ OIDC token acquired and stored as output.");

      - name: üîÑ Debug OIDC Token Info (short)
        run: |
          echo "üîç Showing first part of token for debug:"
          token="${{ steps.oidc.outputs.token }}"
          echo "${token:0:50}..."  # Print first 50 chars (do not leak full token)

      - name: üöÄ Send JSON Payload to Protected API
        run: |
          echo "üì§ Sending POST to $API_URL"
          response=$(curl -s -w "\n%{http_code}" -X POST "$API_URL" \
            -H "Authorization: Bearer ${{ steps.oidc.outputs.token }}" \
            -H "Content-Type: application/json" \
            --data-binary "@$JSON_PAYLOAD_PATH")

          body=$(echo "$response" | head -n -1)
          status_code=$(echo "$response" | tail -n1)

          echo "üîÅ Response status code: $status_code"
          echo "üîÅ Response body: $body"

          if [ "$status_code" -ne 200 ]; then
            echo "‚ùå Request failed with status $status_code"
            exit 1
          fi

          result_status=$(jq -r '.status' <<< "$body")
          result_message=$(jq -r '.message' <<< "$body")

          if [ "$result_status" != "passed" ]; then
            echo "‚ùå Validation failed: $result_message"
            exit 1
          fi

          echo "‚úÖ Validation succeeded: $result_message"
