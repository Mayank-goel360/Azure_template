name: PR Validation for Polling g

on:
  pull_request:                        # ‚Üê use pull_request so forks can be checked out
    branches:
      - main
    types: [opened, synchronize]

permissions:
  id-token: write
  contents: read

env:
  CLIENT_ID: ${{ secrets.AZURE_CONTENT_VALIDATION_CLIENT_ID }}
  API_BASE: https://sentinel-content-validationapi-prod-bvgsc3hjhyeqangg.canadacentral-01.azurewebsites.net/

jobs:
  pr-validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}     # ‚Üê ensure forks can be checked out
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Get changed JSON files and contents
        id: prepare_json_files
        run: |
          set -eux
          echo "üîç Collecting changed JSON files‚Ä¶"
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"

          mapfile -t files < <(git diff --name-only "$BASE" "$HEAD" | grep -Ei '\.json$')
          echo "‚Üí All .json files: ${files[*]:-<none>}"

          # Filter to only ones containing ‚Äúpoll‚Äù (case-insensitive)
          filtered=()
          for f in "${files[@]}"; do
            [[ "$f" =~ poll ]] && filtered+=("$f")
          done

          if [ ${#filtered[@]} -eq 0 ]; then
            echo "‚Üí No polling JSON files changed; skipping validation."
            echo "JSON_PAYLOAD_PATH=empty" >> $GITHUB_ENV
            exit 0
          fi

          echo "‚Üí Polling files: ${filtered[*]}"
          # Build the JSON array
          json='['
          for f in "${filtered[@]}"; do
            jq -c . "$f" \
              | xargs -I% printf '{"filename":"%s","content":%s},' "$f" "%" \
              >> tmp_payload.json
          done
          # trim trailing comma and wrap
          payload=$(<tmp_payload.json)
          payload="[${payload%,}]"
          echo "$payload" > files_payload.json
          echo "JSON_PAYLOAD_PATH=files_payload.json" >> $GITHUB_ENV

      - name: Request OIDC token from GitHub
        if: env.JSON_PAYLOAD_PATH != 'empty'
        id: fetch_token
        run: |
          set -eux
          echo "üîê Fetching OIDC token‚Ä¶"
          raw=$(curl -s \
            -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=api://${CLIENT_ID}")
          token=$(echo "$raw" | jq -r .value)
          echo "‚úîÔ∏è Got token, length=${#token}"
          echo "TOKEN=$token" >> $GITHUB_ENV

      - name: üì° Health-check GET
        if: env.JSON_PAYLOAD_PATH != 'empty'
        run: |
          set -eux
          echo "üöÄ Hitting $API_BASE‚Ä¶"
          resp=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $TOKEN" "$API_BASE")
          body="${resp::-3}"   # all but last 3 chars
          code="${resp: -3}"   # last 3 chars
          echo "HTTP $code ‚Üí $body"
          if [ "${code:0:1}" != "2" ]; then
            echo "‚ùå Health check failed"
            exit 1
          fi

      - name: üì¶ POST polling payload
        if: env.JSON_PAYLOAD_PATH != 'empty'
        run: |
          set -eux
          echo "üöÄ Sending POST to $API_BASE/polling‚Ä¶"
          curl -s -X POST \
               -H "Authorization: Bearer $TOKEN" \
               -H "Content-Type: application/json" \
               --data-binary "@$JSON_PAYLOAD_PATH" \
               "$API_BASE/polling" \
            | jq .
