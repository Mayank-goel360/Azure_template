name: chat

on:
  pull_request_target:
    branches:
      - main
    types:
      - opened
      - synchronize

permissions:
  id-token: write
  contents: read

env:
  CLIENT_ID: ${{ secrets.AZURE_CONTENT_VALIDATION_CLIENT_ID }}
  API_BASE: https://sentinel-content-validationapi-prod-bvgsc3hjhyeqangg.canadacentral-01.azurewebsites.net/

jobs:
  pr-validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}   # needed when using pull_request_target on forks
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Get changed JSON files and contents
        id: prepare_json_files
        run: |
          set -eux

          echo "üîç Collecting changed JSON files‚Ä¶"
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"

          mapfile -t files < <(git diff --name-only "$BASE" "$HEAD" | grep -Ei '\.json$')
          echo "‚Üí All .json files: ${files[*]:-<none>}"

          # Case-insensitive filter for ‚Äúpoll‚Äù
          filtered=()
          for f in "${files[@]}"; do
            if [[ "$f" =~ [Pp]oll ]]; then
              filtered+=("$f")
            fi
          done

          if [ ${#filtered[@]} -eq 0 ]; then
            echo "‚Üí No polling JSON files changed; skipping validation."
            echo "JSON_PAYLOAD_PATH=empty" >> $GITHUB_ENV
            exit 0
          fi

          echo "‚Üí Polling files: ${filtered[*]}"

          # Build JSON array payload
          json_array="["
          for f in "${filtered[@]}"; do
            if jq -e . "$f" > /dev/null; then
              content=$(jq -c . "$f")
              json_array+="{\"filename\":\"$f\",\"content\":$content},"
            else
              echo "‚ùå Invalid JSON in $f"
              exit 1
            fi
          done
          json_array="${json_array%,}]"
          echo "$json_array" > files_payload.json
          echo "JSON_PAYLOAD_PATH=files_payload.json" >> $GITHUB_ENV

      - name: Request OIDC token from GitHub
        if: env.JSON_PAYLOAD_PATH != 'empty'
        id: fetch_token
        run: |
          set -eux
          echo "üîê Fetching OIDC token‚Ä¶"
          raw=$(curl -s \
            -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=api://${CLIENT_ID}")
          token=$(echo "$raw" | jq -r .value)
          echo "‚úîÔ∏è Got token (length=${#token})"
          echo "TOKEN=$token" >> $GITHUB_ENV

          
      - name: üì° Health-check GET
        if: env.JSON_PAYLOAD_PATH != 'empty'
        run: |
          set -eux
          echo "üöÄ Hitting $API_BASE‚Ä¶"
          # Capture both body and status
          resp=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: Bearer $TOKEN" \
            "$API_BASE")
          body=$(echo "$resp" | sed '$d')       # all but last line
          status=$(echo "$resp" | tail -n1)    # last line
          echo "üîÅ HTTP status: $status"
          echo "üîç Raw body:"
          echo "$body"                         # always printed
          
          # Try to parse JSON, but don‚Äôt exit if it fails
          if echo "$body" | jq . > /dev/null 2>&1; then
            echo "‚úîÔ∏è Parsed JSON:"
            echo "$body" | jq .
          else
            echo "‚ö†Ô∏è Body is not JSON or empty"
          fi

          # Exit non-2xx
          if [[ "$status" != 2* ]]; then
            echo "‚ùå Health check failed (status $status)"
            exit 1
          fi

      - name: üì¶ POST polling payload
        if: env.JSON_PAYLOAD_PATH != 'empty'
        run: |
          set -eux
          echo "üöÄ POSTing to $API_BASE/polling‚Ä¶"
          # Capture both body and status
          resp=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            --data-binary "@$JSON_PAYLOAD_PATH" \
            "$API_BASE/polling")
          body=$(echo "$resp" | sed '$d')
          status=$(echo "$resp" | tail -n1)
          echo "üîÅ HTTP status: $status"
          echo "üîç Raw body:"
          echo "$body"

          # Parse JSON if possible
          if echo "$body" | jq . > /dev/null 2>&1; then
            echo "‚úîÔ∏è Parsed JSON:"
            echo "$body" | jq .
          else
            echo "‚ö†Ô∏è Body is not JSON or empty"
          fi

          # Now inspect your API‚Äôs own ‚Äústatus‚Äù field if you want:
          api_status=$(echo "$body" | jq -r '.status // empty')
          echo "‚û°Ô∏è API ‚Äústatus‚Äù field: ${api_status:-<none>}"

          if [[ "$status" != 2* ]] || [[ "$api_status" != passed ]]; then
            echo "‚ùå Validation failed (HTTP $status / api.status=$api_status)"
            exit 1
          fi

          echo "‚úÖ All checks passed!"
