name: PR Validation for Polling file prod

on:
  pull_request_target:
    branches:
      - main
    types: [opened, synchronize]

permissions:
  id-token: write
  contents: read

env:
  CLIENT_ID: ${{ secrets.AZURE_CONTENT_VALIDATION_CLIENT_ID }}
  API_BASE: https://sentinel-content-validationapi-prod-bvgsc3hjhyeqangg.canadacentral-01.azurewebsites.net/

jobs:
  pr-validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Get changed JSON files and contents to send to API endpoint
        id: prepare_json_files
        run: |
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          mapfile -t files < <(git diff --name-only "$BASE" "$HEAD" | grep '\.json$')

          filtered_files=()
          for file in "${files[@]}"; do
            if [[ "$file" =~ [Pp][Oo][Ll][Ll] ]]; then
              filtered_files+=("$file")
            fi
          done

          if [ ${#filtered_files[@]} -eq 0 ]; then
            echo "No polling JSON files changed."
            echo "JSON_PAYLOAD_PATH=empty" >> $GITHUB_ENV
            exit 0
          fi

          json_array="["
          for file in "${filtered_files[@]}"; do
            if [ -f "$file" ] && jq -e . "$file" > /dev/null 2>&1; then
              content=$(jq -c . < "$file")
              json_array+="{\"filename\": \"${file}\", \"content\": $content},"
            else
              echo "‚ùå Invalid JSON in $file"
              exit 1
            fi
          done
          json_array="${json_array%,}]"
          echo "$json_array" > files_payload.json
          echo "JSON_PAYLOAD_PATH=files_payload.json" >> $GITHUB_ENV

      - name: Request OIDC token from GitHub
        if: ${{ env.JSON_PAYLOAD_PATH != 'empty' }}
        id: fetch_token
        run: |
          echo "Requesting OIDC token..."
          raw=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=api://${CLIENT_ID}")
          echo "Raw OIDC response: $raw"
          token=$(echo "$raw" | jq -r '.value // empty')
          if [ -z "$token" ]; then
            echo "‚ùå OIDC token is empty. Likely due to PR from fork. Skipping API calls."
            echo "SKIP_API=true" >> $GITHUB_ENV
          else
            echo "TOKEN=$token" >> $GITHUB_ENV
            echo "SKIP_API=false" >> $GITHUB_ENV
          fi

      - name: Check if API is live
        if: ${{ env.JSON_PAYLOAD_PATH != 'empty' && env.SKIP_API != 'true' }}
        run: |
          echo "Checking API health..."
          response=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE")
          echo "$response" | jq . || echo "‚ö†Ô∏è Invalid JSON response"

      -     name: Send POST request with JSON payload
            if: ${{ env.JSON_PAYLOAD_PATH != 'empty' && env.SKIP_API != 'true' }}
            run: |
                echo "Sending JSON payload to API..."

                response=$(curl -s -w "\n%{http_code}" -X POST "$API_BASE/polling" \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data-binary "@$JSON_PAYLOAD_PATH")

                http_body=$(echo "$response" | sed '$d')
                http_status=$(echo "$response" | tail -n1)

                echo "üîÅ HTTP Status: $http_status"
                echo "üîç Raw Response:"
                echo "$http_body"

                # Try to parse status and message
                result_status=$(echo "$http_body" | jq -r '.status // empty')
                message=$(echo "$http_body" | jq -r '.message // "No message provided"')

                if [ "$http_status" != "200" ]; then
                echo "‚ùå API call failed with status $http_status"
                exit 1
                fi

                if [ "$result_status" != "passed" ]; then
                echo "‚ùå Validation failed: $message"
                exit 1
                fi

                echo "‚úÖ $message"

