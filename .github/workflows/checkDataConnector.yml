name: Validation check for CCP data connectors

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  id-token: write    # enable OIDC token issuance
  contents: read     # allow checkout of code

env:
  CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  API_BASE: ${{ secrets.SENTINEL_CONTENT_API_URL }}


jobs:
  send-json-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed JSON files and contents to send to API endpoint
        id: prepare_json_files
        run: |
          echo "Collecting changed JSON files..."

          BASE="origin/${{ github.event.pull_request.base.ref }}"
          HEAD="${{ github.event.pull_request.head.sha }}"

          # Get changed files with .json extension
          mapfile -t files < <(git diff --name-only "$BASE" "$HEAD" | grep '\.json$')

          json_array="["
          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              if jq -e . "$file" > /dev/null 2>&1; then
                content=$(jq -c . < "$file")  # compact JSON
                json_array+="{\"filename\": \"${file}\", \"content\": $content},"
              else
                echo "❌ Invalid JSON structure in file: $file"
                exit 1
              fi
            fi
          done

          # Finalize the JSON array
          json_array="${json_array%,}]"

          echo "$json_array" > files_payload.json
          echo "JSON_PAYLOAD_PATH=files_payload.json" >> $GITHUB_ENV

      # 1. Fetch OIDC token in trusted context
      - name: 🔐 Request OIDC token from GitHub
        id: oidc
        run: |
          echo "🌐 Fetching OIDC token for audience: api://${CLIENT_ID}"
          raw=$(curl -s \
            -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=api://${CLIENT_ID}")
          token=$(echo "$raw" | jq -r '.value')
          echo "TOKEN=$token" >> $GITHUB_ENV


      - name: Send JSON files to API and check response
        env:
          API_URL: ${{ secrets.SENTINEL_CONTENT_API_URL }}
        run: |
          echo "Sending JSON payload to API"

          response=$(curl -s -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            --data-binary "@$JSON_PAYLOAD_PATH")

          status=$(jq -r '.status' <<< "$response")
          message=$(jq -r '.message' <<< "$response")

          if [ "$status" != "passed" ]; then
            echo "❌ Test Fail : $message"
            exit 1
          fi

          echo "✅ $message"
